{"version":3,"sources":["components/Body.jsx","App.js","serviceWorker.js","index.js"],"names":["Body","state","text1","getBadgeClasses","value","formatecount","this","props","list","map","key","onClick","onIncrement","className","disabled","onDecrement","editingmode","defaultValue","text","onChange","e","setState","target","onSave","onEdit","deletelist","Component","App","date","Date","toLocaleDateString","curtime","inputvalue","handleinput","now","addlist","lists","console","log","filter","handlereset","c","handleIncrement","counter","index","findIndex","t","handleDecrement","editvalue","forEach","data","onsavetext","setInterval","style","fontSize","height","paddingTop","maxHeight","id","onSubmit","type","placeholder","paddingRight","toLocaleTimeString","timedate","addList","counters","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cb10be05.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nclass Body extends Component {\r\n  state = {\r\n    text1: \"\",\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.list.map((list) => (\r\n          <div key={list.key}>\r\n            <button\r\n              onClick={() => this.props.onIncrement(list.key)}\r\n              className=\"btn btn-primary btn-sm\"\r\n            >\r\n              +\r\n            </button>\r\n            <button\r\n              disabled={!list.value}\r\n              onClick={() => this.props.onDecrement(list.key)}\r\n              className=\"btn btn-primary btn-sm\"\r\n            >\r\n              -\r\n            </button>\r\n            <span\r\n              className={\r\n                list.value === 0\r\n                  ? \"badge m-2 badge-warning\"\r\n                  : \"badge m-2 badge-primary\"\r\n              }\r\n            >\r\n              Person {list.value === 0 ? \"Zero\" : list.value}\r\n            </span>\r\n            {/* <span key={list.key}>{list.text}</span> */}\r\n\r\n            {list.editingmode === true ? (\r\n              <input\r\n                className=\"display-none\"\r\n                defaultValue={list.text}\r\n                onChange={(e) => this.setState({ text1: e.target.value })}\r\n              />\r\n            ) : (\r\n              <span>{list.text}</span>\r\n            )}\r\n            {list.editingmode === true ? (\r\n              <button\r\n                className=\"btn m-2 btn-info btn-sm\"\r\n                onClick={() => this.props.onSave(list.key, this.state.text1)}\r\n              >\r\n                Save\r\n              </button>\r\n            ) : (\r\n              <button\r\n                onClick={() => this.props.onEdit(list.key)}\r\n                className=\"btn m-2 btn-info btn-sm\"\r\n              >\r\n                Edit\r\n              </button>\r\n            )}\r\n\r\n            <button\r\n              className=\"btn btn-danger btn-sm\"\r\n              onClick={() => this.props.deletelist(list.key)}\r\n            >\r\n              Delete\r\n            </button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n  getBadgeClasses = (value) => {\r\n    return value === 0 ? \"badge m-2 badge-warning\" : \"badge m-2 badge-primary\";\r\n  };\r\n  formatecount = (value) => {\r\n    return value === 0 ? \"Zero\" : value;\r\n  };\r\n}\r\n\r\nexport default Body;\r\n","import React, { Component } from \"react\";\n\nimport Body from \"./components/Body\";\nclass App extends Component {\n  state = {\n    date: new Date().toLocaleDateString(),\n    curtime: new Date(),\n    list: [],\n    inputvalue: { text: \"\", key: \"\", value: 0, editingmode: false },\n  };\n\n  timedate() {\n    setInterval(() => {\n      this.setState({ curtime: new Date() });\n    }, 1000);\n  }\n\n  handleinput = (e) => {\n    this.setState({\n      inputvalue: {\n        text: e.target.value,\n        key: Date.now(),\n        value: 0,\n        editingmode: false,\n      },\n    });\n  };\n\n  addlist = (e) => {\n    const list = this.state.inputvalue;\n    if (list.text !== \"\") {\n      const lists = [...this.state.list, list];\n      this.setState({\n        list: lists,\n        inputvalue: { text: \"\", key: \"\", value: \"\", editingmode: \"\" },\n      });\n      console.log(list);\n    }\n  };\n\n  deletelist = (key) => {\n    const list = this.state.list.filter((lists) => lists.key !== key);\n    this.setState({ list });\n  };\n  handlereset = () => {\n    const list = this.state.list.map((c) => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ list });\n  };\n\n  handleIncrement = (counter) => {\n    const list = [...this.state.list];\n    const index = list.findIndex((t) => t.key === counter);\n    if (index >= 0) {\n      list[index].value++;\n      this.setState({ list });\n    }\n  };\n  handleDecrement = (counter) => {\n    const list = [...this.state.list];\n    const index = list.findIndex((t) => t.key === counter);\n    if (index >= 0) {\n      list[index].value--;\n      this.setState({ list });\n    }\n  };\n\n  editvalue = (counter) => {\n    const list = [...this.state.list];\n\n    list.forEach((lists) => {\n      if (lists.key === counter) {\n        lists.editingmode = true;\n      }\n    });\n    const data = [...list];\n    this.setState({ list: data });\n  };\n  onsavetext = (key, text) => {\n    const list = [...this.state.list];\n    list.forEach((lists) => {\n      if (lists.key === key) {\n        lists.editingmode = false;\n        lists.text = text;\n      }\n    });\n    const data = [...list];\n    this.setState({ list: data });\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <nav\n          className=\"navbar navbar-light bg-light\"\n          style={{ fontSize: 10, height: 50, paddingTop: 2, maxHeight: 35 }}\n        >\n          <form id=\"to-do-form\" onSubmit={this.addlist} />\n          <label>Enter task</label>\n\n          <input\n            type=\"text\"\n            placeholder=\"Enter task\"\n            value={this.state.inputvalue.text}\n            onChange={this.handleinput}\n          />\n          <button onClick={this.addlist} className={\"btn btn-primary btn-sm\"}>\n            Add Task\n          </button>\n          <button\n            style={{ paddingRight: 10, fontSize: 9 }}\n            onClick={this.handlereset}\n            className=\"btn btn-danger btn-sm\"\n          >\n            Reset number of people\n          </button>\n          <span\n            className=\"badge badge-danger\"\n            style={{ fontSize: 14, paddingTop: 10 }}\n          >\n            {this.state.date} {this.state.curtime.toLocaleTimeString()}\n            {this.timedate()}\n          </span>\n        </nav>\n        <div>\n          <Body\n            list={this.state.list}\n            addList={this.addList}\n            counter={this.state.counters}\n            deletelist={this.deletelist}\n            onIncrement={this.handleIncrement}\n            onDecrement={this.handleDecrement}\n            onEdit={this.editvalue}\n            onSave={this.onsavetext}\n          ></Body>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}